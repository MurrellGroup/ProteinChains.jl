var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = ProteinChains","category":"page"},{"location":"#ProteinChains","page":"Home","title":"ProteinChains","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for ProteinChains.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [ProteinChains]","category":"page"},{"location":"#ProteinChains.AbstractProperty","page":"Home","title":"ProteinChains.AbstractProperty","text":"AbstractProperty\n\nAbstract type for wrapped properties associated with a ProteinChain to define custom behavior.\n\n\n\n\n\n","category":"type"},{"location":"#ProteinChains.IndexableProperty","page":"Home","title":"ProteinChains.IndexableProperty","text":"IndexableProperty\n\nIndexableProperty(value::AbstractArray)\n\nAn AbstractArray property with size (dims..., length(chain)), and residue indexing of the chain being propagated to the last dimension of the array.\n\njulia> chain = pdb\"1ASS\"A;\n\njulia> addproperties!(pdb\"1ASS\"A; y=IndexableProperty(rand(2,152)));\n\njulia> chain.y == chain[1:10].y\nfalse\n\njulia> chain.y[:,1:10] == chain[1:10].y\ntrue\n\n\n\n\n\n","category":"type"},{"location":"#ProteinChains.ProteinChain","page":"Home","title":"ProteinChains.ProteinChain","text":"ProteinChain{T<:Real}\n\nRepresents a protein chain with a basic set of fields from which some other properties might be derived. The addproperties! function can be used to add additional properties.\n\nFields\n\nid::String: Identifier for the protein chain.\natoms::Vector{Vector{Atom{T}}}: List of atoms in each residue.\nsequence::String: Amino acid sequence of the protein.\nins_codes::String: Insertion codes for each residue.\nnumbering::Vector{Int32}: Residue numbering (author).\nproperties::ProteinChains.NamedProperties: Named properties associated with the chain.\n\nSee also addproperties!, StandardProperty, IndexableProperty. ```\n\n\n\n\n\n","category":"type"},{"location":"#ProteinChains.ProteinStructure","page":"Home","title":"ProteinChains.ProteinStructure","text":"ProteinStructure{T} <: AbstractVector{ProteinChain{T}}\n\nFields\n\nname::String: Usually just the base name of the original file.\natoms::Vector{Atom{T}}: free atoms from the structure that were not part of any protein residue.\nchains::Vector{ProteinChain{T}}: a collection of ProteinChains.\nproperties::NamedProperties: arbitrary properties.\n\n\n\n\n\n","category":"type"},{"location":"#ProteinChains.ProteinStructureStore","page":"Home","title":"ProteinChains.ProteinStructureStore","text":"ProteinStructureStore <: AbstractDict{String,ProteinStructure}\n\nA mutable struct representing a store for protein structures using HDF5 file format.\n\nThe struct implements the AbstractDict interface, allowing for dictionary-like operations.\n\nA ProteinStructureStore gets closed when there no longer exists a program-accessible reference to it.\n\nExamples\n\njulia> store = ProteinStructureStore(\"store.h5\")\nProteinStructureStore with 0 entries\n\njulia> store[\"3HFM\"] = pdb\"3HFM\"\n[ Info: Downloading file from PDB: 3HFM\n3-chain ProteinStructure{Float64} \"3HFM.cif\"\n 215-residue ProteinChain{Float64, @NamedTuple{}} (H)\n 214-residue ProteinChain{Float64, @NamedTuple{}} (L)\n 129-residue ProteinChain{Float64, @NamedTuple{}} (Y)\n\njulia> store\nProteinStructureStore with 1 entry\n\njulia> keys(store)\nSet{String} with 1 element:\n  \"3HFM\"\n\njulia> delete!(store, \"3HFM\")\nProteinStructureStore with 0 entries\n\n\n\n\n\n","category":"type"},{"location":"#ProteinChains.ProteinStructureStore-2","page":"Home","title":"ProteinChains.ProteinStructureStore","text":"ProteinStructureStore(filename, mode=\"cw\")\n\nOpen or create an HDF5 file as a ProteinStructureStore where mode is one of:\n\n\"r\" read only\n\"r+\" read and write\n\"cw\" read and write, create file if not existing, do not truncate\n\"w\" read and write, create a new file (destroys any existing contents)\n\nStructure attributes\n\nThe ProteinStructureStore type allows for storing metadata about each structure in the file, that can be lazily read from the file without loading the structure into memory using readattribute. These attributes are only written to the file when the structure is written, and are not preserved in memory after the structure has been read.\n\nT: type of the coordinates in the structure.\nn_residues: vector of number of residues per model in the structure.\nn_chains: vector of number of chains per model in the structure.\n\n\n\n\n\n","category":"type"},{"location":"#ProteinChains.ProteinStructureStore-Tuple{Function, Vararg{Any}}","page":"Home","title":"ProteinChains.ProteinStructureStore","text":"ProteinStructureStore(f::Function, filename, mode=\"cw\")\n\n\n\n\n\n","category":"method"},{"location":"#ProteinChains.StandardProperty","page":"Home","title":"ProteinChains.StandardProperty","text":"StandardProperty\n\nStandardProperty(value)\n\nA property with arbitrary type. The value is retained as is.\n\nThis is the default property type for addproperties!.\n\nSee also IndexableProperty.\n\n\n\n\n\n","category":"type"},{"location":"#ProteinChains.addproperties!-Tuple{ProteinChain, NamedTuple}","page":"Home","title":"ProteinChains.addproperties!","text":"addproperties!(chain::ProteinChain, properties::NamedTuple)\naddproperties!(chain::ProteinChain; properties...)\n\nCreates a new ProteinChain instance with the added properties. Indexing of property values can be specified with a wrapper type, such as IndexableProperty.    \n\nSee also removeproperties!, IndexableProperty.\n\n\n\n\n\n","category":"method"},{"location":"#ProteinChains.deleteproperty-Tuple{ProteinStructureStore, AbstractString, Integer, Symbol}","page":"Home","title":"ProteinChains.deleteproperty","text":"deleteproperty(store::ProteinStructureStore, name::AbstractString, index::Integer, property::Symbol)\n\nDelete a property from a chain in a structure. Chains are indexed from 1 to length(store, name).\n\n\n\n\n\n","category":"method"},{"location":"#ProteinChains.deserialize-Tuple{AbstractString}","page":"Home","title":"ProteinChains.deserialize","text":"deserialize(filename::AbstractString)\n\nDeserialize ProteinStructure objects from an HDF5 file. Returns a Vector{ProteinStructure} of all structures stored in the file.\n\n\n\n\n\n","category":"method"},{"location":"#ProteinChains.mapmmcif-Tuple{Any, Vararg{Pair{String, String}}}","page":"Home","title":"ProteinChains.mapmmcif","text":"mapmmcif(mmcifdict, field1 => field2, field3 => field4, ...)\n\njulia> import BioStructures\n\njulia> filename = BioStructures.downloadpdb(\"3HFM\", format=BioStructures.MMCIFFormat);\n[ Info: Downloading file from PDB: 3HFM\n\njulia> mmcifdict = BioStructures.MMCIFDict(filename);\n\njulia> mapmmcif(mmcifdict,\n           \"_atom_site.auth_asym_id\"   => \"_atom_site.label_entity_id\",\n           \"_entity_src_gen.entity_id\" => \"_entity_src_gen.pdbx_gene_src_ncbi_taxonomy_id\")\nDict{String, String} with 3 entries:\n  \"Y\" => \"9031\"\n  \"L\" => \"10090\"\n  \"H\" => \"10090\"\n\n\n\n\n\n","category":"method"},{"location":"#ProteinChains.pdbentry-Tuple{AbstractString}","page":"Home","title":"ProteinChains.pdbentry","text":"pdbentry(pdbid::AbstractString; format=MMCIFFormat, kwargs...)\n\nKeyword arguments get propagated to BioStructures.downloadpdb\n\nDownloads are cached in a temporary directory.\n\nExamples\n\njulia> pdbentry(\"1EYE\")\n[ Info: Downloading file from PDB: 1EYE\n1-chain ProteinStructure{Float64} \"1EYE.cif\"\n 256-residue ProteinChain{Float64, @NamedTuple{}} (A)\n\njulia> pdb\"1EYE\" # string macro for convenience\n[ Info: File exists: 1EYE\n1-chain ProteinStructure{Float64} \"1EYE.cif\"\n 256-residue ProteinChain{Float64, @NamedTuple{}} (A)\n\njulia> pdb\"1EYE\"A # string suffix to get a specific chain\n[ Info: File exists: 1EYE\n256-residue ProteinChain{Float64, @NamedTuple{}} (A)\n\njulia> pdb\"1EYE\"1 # integer suffix to specify \"ba_number\" keyword\n[ Info: Downloading file from PDB: 1EYE\n2-chain ProteinStructure{Float64} \"1EYE_ba1.cif\"\n 256-residue ProteinChain{Float64, @NamedTuple{}} (A)\n 256-residue ProteinChain{Float64, @NamedTuple{}} (A-2)\n\n\n\n\n\n","category":"method"},{"location":"#ProteinChains.readattribute-Tuple{ProteinStructureStore, AbstractString, AbstractString}","page":"Home","title":"ProteinChains.readattribute","text":"readattribute(store::ProteinStructureStore, name::AbstractString, attribute::AbstractString)\n\nRead metadata about a structure without loading the structure into memory.\n\n\n\n\n\n","category":"method"},{"location":"#ProteinChains.readproperty-Tuple{ProteinStructureStore, AbstractString, Integer, Symbol}","page":"Home","title":"ProteinChains.readproperty","text":"readproperty(store::ProteinStructureStore, name::AbstractString, index::Integer, property::Symbol)\n\nRead a property from a chain in a structure. Chains are indexed from 1 to length(store, name).\n\n\n\n\n\n","category":"method"},{"location":"#ProteinChains.removeproperties!-Tuple{ProteinChain, Vararg{Symbol}}","page":"Home","title":"ProteinChains.removeproperties!","text":"removeproperties!(chain::ProteinChain, names::Symbol...)\n\nCreates a new ProteinChain instance with the property names in names removed.\n\nSee also addproperties!\n\n\n\n\n\n","category":"method"},{"location":"#ProteinChains.serialize-Tuple{AbstractString, AbstractVector{<:ProteinStructure}}","page":"Home","title":"ProteinChains.serialize","text":"serialize(filename::AbstractString, structures::AbstractVector{<:ProteinStructure})\n\nSerialize a vector of ProteinStructure objects to an HDF5 file. This function creates a new ProteinStructureStore and writes each structure in the input vector to it. Each structure is stored using its name as the key.\n\n\n\n\n\n","category":"method"},{"location":"#ProteinChains.writeattribute-Tuple{ProteinStructureStore, AbstractString, AbstractString, Any}","page":"Home","title":"ProteinChains.writeattribute","text":"writeattribute(store::ProteinStructureStore, name::AbstractString, attribute::AbstractString, value)\n\nWrite metadata about a structure.\n\n\n\n\n\n","category":"method"},{"location":"#ProteinChains.writeproperty-Tuple{ProteinStructureStore, AbstractString, Integer, Symbol, Any}","page":"Home","title":"ProteinChains.writeproperty","text":"writeproperty(store::ProteinStructureStore, name::AbstractString, index::Integer, property::Symbol, value)\n\nWrite a property to a chain in a structure. Chains are indexed from 1 to length(store, name).\n\n\n\n\n\n","category":"method"}]
}
