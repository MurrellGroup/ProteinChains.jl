var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = ProteinChains","category":"page"},{"location":"#ProteinChains","page":"Home","title":"ProteinChains","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for ProteinChains.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [ProteinChains]","category":"page"},{"location":"#ProteinChains.STANDARD_RESIDUE_TEMPLATE","page":"Home","title":"ProteinChains.STANDARD_RESIDUE_TEMPLATE","text":"STANDARD_RESIDUE_TEMPLATE\n\nThis is a template of a \"standard residue\", with a very specific and distinct shape, size, and orientation. which needs to be consistent if we want to represent protein structures as sets of residue rotations and translations.\n\nThus, we can use this residue as a template for aligning other residues with very precise geometry to it.\n\njulia> IdealResidue{Float64}(BackboneGeometry(N_Ca_C_angle = 1.93); template=ProteinChains.STANDARD_RESIDUE_TEMPLATE)\n3×3 IdealResidue{Float64}:\n -1.06447   -0.199174   1.26364\n  0.646303  -0.529648  -0.116655\n  0.0        0.0        0.0\n\n\n\n\n\n","category":"constant"},{"location":"#ProteinChains.BackboneGeometry","page":"Home","title":"ProteinChains.BackboneGeometry","text":"BackboneGeometry(;\n    N_Ca_length = 1.46,\n    Ca_C_length = 1.52,\n    C_N_length = 1.33,\n\n    N_Ca_C_angle = 1.94,\n    Ca_C_N_angle = 2.03,\n    C_N_Ca_angle = 2.13,\n)\n\nDefine the idealized bond lengths and bond angles of a protein backbone.\n\n\n\n\n\n","category":"type"},{"location":"#ProteinChains.IdealResidue","page":"Home","title":"ProteinChains.IdealResidue","text":"IdealResidue{T<:AbstractFloat} <: AbstractMatrix{T}\n\nIdealResidue{T}(backbone_geometry=DEFAULT_BACKBONE_GEOMETRY; template=nothing) where T\n\nA 3x3 matrix representing the idealized geometry of a protein residue, with columns representing the N, Ca, and C atom positions of a residue positioned at the origin.\n\n\n\n\n\n","category":"type"},{"location":"#ProteinChains.IndexableProperty","page":"Home","title":"ProteinChains.IndexableProperty","text":"IndexableProperty <: AbstractProperty\n\nIndexableProperty(value::AbstractArray)\n\nAn AbstractArray property with size (dims..., length(chain)), and residue indexing of the chain being propagated to the last dimension of the array.\n\njulia> chain = pdb\"1ASS\"A;\n\njulia> chain = addproperties(pdb\"1ASS\"A; y=IndexableProperty(rand(2,152)));\n\njulia> chain.y == chain[1:10].y\nfalse\n\njulia> chain.y[:,1:10] == chain[1:10].y\ntrue\n\n\n\n\n\n","category":"type"},{"location":"#ProteinChains.PersistentProperty","page":"Home","title":"ProteinChains.PersistentProperty","text":"PersistentProperty(value)\n\nA property of arbitrary type that persists after residue indexing of a chain.\n\njulia> chain = addproperties(pdb\"1ASS\"A; x=PersistentProperty(1));\n\njulia> chain.x == chain[1:10].x\ntrue\n\n\n\n\n\n","category":"type"},{"location":"#ProteinChains.ProteinChain","page":"Home","title":"ProteinChains.ProteinChain","text":"ProteinChain{T<:Real,Ps<:NamedProperties}\n\nRepresents a protein chain with a basic set of fields from which some other properties might be derived. The addproperties function can be used to instantiate new chains with additional properties.\n\nFields\n\nid::String: Identifier for the protein chain.\natoms::Vector{Vector{Atom{T}}}: List of atoms in each residue.\nsequence::String: Amino acid sequence of the protein.\nnumbering::Vector{Int32}: Residue numbering (author). See renumber for renumbering.\nproperties::Ps: Named properties associated with the chain.\n\nSee also addproperties, PersistentProperty, IndexableProperty. ```\n\n\n\n\n\n","category":"type"},{"location":"#ProteinChains.ProteinStructure","page":"Home","title":"ProteinChains.ProteinStructure","text":"ProteinStructure{T} <: AbstractVector{ProteinChain{T}}\n\nFields\n\nname::String: Usually just the base name of the original file.\natoms::Vector{Atom{T}}: free atoms from the structure that were not part of any protein chain.\nchains::Vector{<:ProteinChain{T}}: a collection of ProteinChains.\n\nExamples\n\njulia> structure = pdb\"1ASS\"\n\n\n\n\n\n","category":"type"},{"location":"#ProteinChains.ProteinStructureStore","page":"Home","title":"ProteinChains.ProteinStructureStore","text":"ProteinStructureStore <: AbstractDict{String,ProteinStructure}\n\nA mutable struct representing a store for protein structures using HDF5 file format.\n\nThe struct implements the AbstractDict interface, allowing for dictionary-like operations.\n\nA ProteinStructureStore gets closed when there no longer exists a program-accessible reference to it.\n\nExamples\n\njulia> store = ProteinStructureStore(\"store.h5\")\nProteinStructureStore with 0 entries\n\njulia> store[\"3HFM\"] = pdb\"3HFM\"\n[ Info: Downloading file from PDB: 3HFM\n3-chain ProteinStructure{Float64} \"3HFM.cif\"\n 215-residue ProteinChain{Float64, @NamedTuple{}} (H)\n 214-residue ProteinChain{Float64, @NamedTuple{}} (L)\n 129-residue ProteinChain{Float64, @NamedTuple{}} (Y)\n\njulia> store\nProteinStructureStore with 1 entry\n\njulia> keys(store)\nSet{String} with 1 element:\n  \"3HFM\"\n\njulia> delete!(store, \"3HFM\")\nProteinStructureStore with 0 entries\n\n\n\n\n\n","category":"type"},{"location":"#ProteinChains.ProteinStructureStore-2","page":"Home","title":"ProteinChains.ProteinStructureStore","text":"ProteinStructureStore(filename, mode=\"cw\")\n\nOpen or create an HDF5 file as a ProteinStructureStore where mode is one of:\n\n\"r\" read only\n\"r+\" read and write\n\"cw\" read and write, create file if not existing, do not truncate\n\"w\" read and write, create a new file (destroys any existing contents)\n\n\n\n\n\n","category":"type"},{"location":"#ProteinChains.ProteinStructureStore-Tuple{Function, Vararg{Any}}","page":"Home","title":"ProteinChains.ProteinStructureStore","text":"ProteinStructureStore(f::Function, filename, mode=\"cw\")\n\n\n\n\n\n","category":"method"},{"location":"#ProteinChains.addproperties-Tuple{ProteinChain, Vararg{Symbol}}","page":"Home","title":"ProteinChains.addproperties","text":"addproperties(chain::ProteinChain, names::Symbol...)\naddproperties(chain::ProteinStructure, names::Symbol...)\n\nAdd predefined properties to a chain or chains of a structure.\n\n\n\n\n\n","category":"method"},{"location":"#ProteinChains.addproperties-Tuple{ProteinChain}","page":"Home","title":"ProteinChains.addproperties","text":"addproperties(chain::ProteinChain; properties...)\n\nCreates a new ProteinChain instance with the added properties. Indexing behavior of property values can be specified by wrapping them with PersistentProperty or IndexableProperty.\n\nValues get wrapped by PersistentProperty by default.\n\nSee also removeproperties, PersistentProperty, IndexableProperty\n\n\n\n\n\n","category":"method"},{"location":"#ProteinChains.append_residue-Tuple{Backboner.Backbone, Vector{<:Real}}","page":"Home","title":"ProteinChains.append_residue","text":"append_residue(Backbone::Backbone, torsion_angles::Vector{<:Real}; ideal::BackboneGeometry=DEFAULT_BACKBONE_GEOMETRY)\n\nCreate a new backbone by appending 3 new torsion angles (ψ, ω, ϕ) at the end, using bond lengths and bond angles specified in BackboneGeometry.\n\n\n\n\n\n","category":"method"},{"location":"#ProteinChains.deserialize-Tuple{AbstractString}","page":"Home","title":"ProteinChains.deserialize","text":"deserialize(filename::AbstractString)\n\nDeserialize ProteinStructure objects from an HDF5 file. Returns a Vector{ProteinStructure} of all structures stored in the file.\n\n\n\n\n\n","category":"method"},{"location":"#ProteinChains.mapmmcif-Tuple{Any, Vararg{Pair{String, String}}}","page":"Home","title":"ProteinChains.mapmmcif","text":"mapmmcif(mmcifdict, field1 => field2, field3 => field4, ...)\n\njulia> import BioStructures\n\njulia> filename = BioStructures.downloadpdb(\"3HFM\", format=BioStructures.MMCIFFormat);\n[ Info: Downloading file from PDB: 3HFM\n\njulia> mmcifdict = BioStructures.MMCIFDict(filename);\n\njulia> mapmmcif(mmcifdict,\n           \"_atom_site.auth_asym_id\"   => \"_atom_site.label_entity_id\",\n           \"_entity_src_gen.entity_id\" => \"_entity_src_gen.pdbx_gene_src_ncbi_taxonomy_id\")\nDict{String, String} with 3 entries:\n  \"Y\" => \"9031\"\n  \"L\" => \"10090\"\n  \"H\" => \"10090\"\n\n\n\n\n\n","category":"method"},{"location":"#ProteinChains.pdbentry-Tuple{AbstractString}","page":"Home","title":"ProteinChains.pdbentry","text":"pdbentry(pdbid::AbstractString; format=MMCIFFormat, kwargs...)\n\nKeyword arguments get propagated to BioStructures.downloadpdb\n\nDownloads are cached in a temporary directory.\n\nExamples\n\njulia> pdbentry(\"1EYE\")\n[ Info: Downloading file from PDB: 1EYE\n1-chain ProteinStructure{Float64} \"1EYE.cif\"\n 256-residue ProteinChain{Float64, @NamedTuple{}} (A)\n\njulia> pdb\"1EYE\" # string macro for convenience\n[ Info: File exists: 1EYE\n1-chain ProteinStructure{Float64} \"1EYE.cif\"\n 256-residue ProteinChain{Float64, @NamedTuple{}} (A)\n\njulia> pdb\"1EYE\"A # string suffix to get a specific chain\n[ Info: File exists: 1EYE\n256-residue ProteinChain{Float64, @NamedTuple{}} (A)\n\njulia> pdb\"1EYE\"1 # integer suffix to specify \"ba_number\" keyword\n[ Info: Downloading file from PDB: 1EYE\n2-chain ProteinStructure{Float64} \"1EYE_ba1.cif\"\n 256-residue ProteinChain{Float64, @NamedTuple{}} (A)\n 256-residue ProteinChain{Float64, @NamedTuple{}} (A-2)\n\n\n\n\n\n","category":"method"},{"location":"#ProteinChains.prepend_residue-Tuple{Backboner.Backbone, Vector{<:Real}}","page":"Home","title":"ProteinChains.prepend_residue","text":"append_residue(Backbone::Backbone, torsion_angles::Vector{<:Real}; ideal::BackboneGeometry=DEFAULT_BACKBONE_GEOMETRY)\n\nCreate a new backbone by prepending 3 new torsion angles (ψ, ω, ϕ) at the beginning, using bond lengths and bond angles specified in the BackboneGeometry.\n\nnote: Note\nThe torsion angle order is the same as it would be when appending. The order is not reversed.\n\n\n\n\n\n","category":"method"},{"location":"#ProteinChains.removeproperties-Tuple{ProteinChain, Vararg{Symbol}}","page":"Home","title":"ProteinChains.removeproperties","text":"removeproperties(chain::ProteinChain, names::Symbol...)\n\nCreates a new ProteinChain instance with the property names in names removed.\n\nSee also addproperties\n\n\n\n\n\n","category":"method"},{"location":"#ProteinChains.renumber-Tuple{ProteinStructure, MMCIFDict}","page":"Home","title":"ProteinChains.renumber","text":"renumber(structure::ProteinStructure, mmcif_dict::BioStructures.MMCIFDict)\n\nReturn residue numbers from \"atomsite.labelseqids\".\n\nThe ProteinStructure will automatically add a renumbering property if an MMCIFDict is passed (default if the file is an MMCIF).\n\n\n\n\n\n","category":"method"},{"location":"#ProteinChains.serialize-Tuple{AbstractString, AbstractVector{<:ProteinStructure}}","page":"Home","title":"ProteinChains.serialize","text":"serialize(filename::AbstractString, structures::AbstractVector{<:ProteinStructure})\n\nSerialize a vector of ProteinStructure objects to an HDF5 file. This function creates a new ProteinStructureStore and writes each structure in the input vector to it. Each structure is stored using its name as the key.\n\n\n\n\n\n","category":"method"}]
}
